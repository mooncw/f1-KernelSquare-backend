# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java Test with Gradle

on:
  push:
    branches-ignore:
      - main

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set test yml
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/test/resources/application.yml
        env:
          spring.security.jwt.secret: ${{ secrets.JWT_SECRET_KEY }}
          spring.data.mongodb.uri: ${{ secrets.MONGO_TEST_URI }}
          custom.domain.image.baseUrl: ${{ secrets.BASE_URL }}
          cloud.aws.s3.bucket: ${{ secrets.S3_BUCKET_NAME }}
          cloud.aws.region.static: ${{ secrets.S3_REGION }}
          cloud.aws.credentials.accessKey: ${{ secrets.AWS_ACCESS_KEY }}
          cloud.aws.credentials.secretKey: ${{ secrets.AWS_ACCESS_SECRET }}

      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew

      - name: Docker Compose For Test
        run: |
          touch docker-compose.yml
          echo "${{ secrets.CI_DOCKER_COMPOSE }}" > docker-compose.yml
          echo docker-compose.yml
          docker-compose up -d

      - name: Test with Gradle
        run: ./gradlew test